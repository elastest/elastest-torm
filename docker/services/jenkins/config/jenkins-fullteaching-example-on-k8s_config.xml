<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.33">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.72">
    <script>node {
    elastest(tss: [&apos;EUS&apos;], surefireReportsPattern: &apos;**/target/surefire-reports/TEST-*.xml&apos;, project: &apos;Jenkins Examples&apos;) {
        withKubeConfig([credentialsId: &apos;k8s-api-token&apos;, serverUrl: env.K8S_URL]) {
            try {
                stage(&quot;Start SUT&quot;) {
                    git(
                        url: &apos;https://github.com/elastest/full-teaching-experiment.git&apos;
                        ) 
                    sh &quot;cd ./k8s; export BUG_TAG=demo;./addSutPrefix.sh;kubectl create -f .&quot;
                    checkPodStatus(5, &quot;${ET_SUT_CONTAINER_NAME}-full-teaching&quot;)
                }
                
                stage(&quot;Run tests&quot;) {
                    mvnHome = tool &apos;M3.3.9&apos;
                    def sutIp = getPodIp(&quot;${ET_SUT_CONTAINER_NAME}-full-teaching&quot;)
                    waitForService(5, &quot;https://&quot; + sutIp + &quot;:5000&quot;)
                    withEnv([&apos;ET_SUT_HOST=&apos; + sutIp]) {
                        echo &quot;Running test&quot;
                        sh &quot;&apos;${mvnHome}/bin/mvn&apos; -Dapp.url=https://&quot; + sutIp +&quot;:5000/ -Dtest=FullTeachingTestE2EREST,FullTeachingTestE2EVideoSession,FullTeachingTestE2EChat -B -DforkCount=0 test&quot;
                    }
                }
            
            } finally {
                sh &quot;kubectl delete -f k8s/&quot;
            }
        }
    }
}

def getPodIp(podName) {
    echo &quot;Retrive pod ip&quot;
    def podIp = sh (
        script: &quot;kubectl get pod -o wide | grep &quot; + podName.replace(&apos;_&apos;,&apos;-&apos;) + &quot; | awk &apos;{print \$6}&apos;&quot;,
        returnStdout: true
    ).split( &apos;\n&apos; ).first()

    echo podName+&quot; IP = &quot; + podIp;
    return podIp;
}

def waitForService(time, serviceUrl) {
    timeout(time) {
        waitUntil {
            echo &quot;Waiting for the service &quot; + serviceUrl + &quot; is ready&quot;
            script {
                def r = sh script: &apos;wget -q --no-check-certificate &apos; + serviceUrl + &apos; -O /dev/null&apos;, returnStatus: true
                return (r == 0);
           }
        }
    }
}

def checkPodStatus(time, podName) {
    timeout(time) {
        waitUntil {
            echo &quot;Waiting for the pod &quot; + podName + &quot; is created&quot;
            script {
                def r = sh script: &apos;kubectl get pods -l io.elastest.service=&apos; + podName.replace(&apos;_&apos;,&apos;-&apos;) + &quot; | awk &apos;{print \$3}&apos;&quot;, returnStdout: true
                def status = r.split(&quot;\n&quot;).last()
                echo &quot;Pod ${podName} current status: &quot; + status
                return ( status == &apos;Running&apos;);
           }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>