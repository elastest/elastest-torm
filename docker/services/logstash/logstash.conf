input {
  http {
    type => "et_logs"
    port => 5002
    codec => "json"
  }
  http {
    type => "dynamic"
    port => 5003
    codec => "json"
  }
  tcp {
    type => "et_logs"
    port => 5000
    codec => "json"
  }
  beats {
    type => "beats"
    port => 5044
    client_inactivity_timeout => "900"
  }
  beats {
    port => 5037
    client_inactivity_timeout => "900"
    add_field => {
      "stream" => "et_dockbeat"
    }
  }
  tcp {
    port => 5001
    codec => "json"
    add_field => {
      "stream" => "et_dockbeat"
    }
  }
}

filter{
  # If messages field exists, send an event for each array element
  if [messages] {
     split {
       field => "messages"
       add_field => { "message"=> "%{[messages]}" }
       remove_field => [ "messages" ]
     }
  }

  # Grok matches are separated to work correctly
  grok {
    patterns_dir => ["./grok-patterns"]
    match => { "message" => "%{JAVALOGLEVEL:level}" }
  }
  grok {
    patterns_dir => ["./grok-patterns"]
    match => { "message" => "%{CONTAINERNAME:containerName}" }
  }

  # From filebeat or metricbeat with Docker and K8s
  if ([beat] and [docker] and [docker][container] and [docker][container][name]) or ([kubernetes] and [kubernetes][pod] and [kubernetes][pod][name]){
    mutate {
      remove_field => [ "containerName" ]
    }
    if ![kubernetes] {
      mutate {
        add_field => {"containerName" => "%{[docker][container][name]}"}
      }
    } else {
      mutate {
        add_field => {"containerName" => "%{[kubernetes][container][name]}"}
        gsub => ["containerName", "-", "_"]
      }
    }

    # If not metricbeat (is filebeat)
    if ![metricset]{
      mutate {
        remove_field => ["docker"]
      }

      # Drop if there is not component and not is sut/test container
      if ![component]{
        if [containerName] !~ /^(test|sut|eus(_|-)browser(_|-).*_exec|k8s_test|k8s_sut|k8s_eus(_|-)browser(_|-).*(_|-)exec)(_)?(\d*)(\S*)?/ {
          drop { }
        }
      }else{
        if [containerName]{
            mutate {
              replace => {"component" => "%{component}_%{[containerName]}"}
            }
        }
      }
    }
    else{
      mutate {
        replace => {"component" => "%{component}_%{[containerName]}"}
      }
    }

    if [json]{
      if [json][log]{
        mutate {
          remove_field => [ "message" ]
        }
        mutate {
          add_field => {"message" => "%{[json][log]}"}
        }
      }
      mutate {
        remove_field => [ "json" ]
      }
      mutate {
        remove_field => [ "prospector" ]
      }
    }
    else{
      if [log] and ![kubernetes]{
        mutate {
          remove_field => [ "message" ]
        }
        mutate {
          add_field => {"message" => "%{[log]}"}
        }
        mutate {
          remove_field => [ "log" ]
        }
      }
    }
  }

  # match component, exec and componentService (if exist). Supports: test_37, sut37, sut34_full-teaching-mysql_1, sut_37_ece
  # Real regex => ^(test|sut|dynamic|eus-browser-[^_]*_exec|k8s_eus-browser-[^_]*_exec)_?(\d+|ext\d+_e\d+|s\d+_e\d+)(_([^_]*(_\d*)?))?
  if ![beat] or ([beat] and ![exec]) {
    grok{
      patterns_dir => ["./grok-patterns"]
      match => { "containerName" => "^([<]\d*[>].*)?(?<component>(test|sut|dynamic|k8s_test|k8s_sut|eus-browser-[^_]*(_|-)exec|k8s_eus-browser-[^_]*(_|-)exec))(_|-)?(?<exec>(\d+|ext\d+_e\d+|s\d+_e\d+))(_(?<componentService>[^_]*(?=_\d*)?))?"}
    }
  }

  # Clean message
  mutate {
    gsub => ["message", "^([<]\d*[>].*)?(?>test_(\d+|ext\d+_e\d+|s\d+_e\d+)|sut_(\d+|ext\d+_e\d+|s\d+_e\d+)|dynamic_(\d+|ext\d+_e\d+|s\d+_e\d+)|k8s_test(_|-)(\d+|ext\d+_e\d+|s\d+_e\d+)|k8s_sut(_|-)(\d+|ext\d+_e\d+|s\d+_e\d+)|k8s_eus-browser-[^_]*(_|-)exec(\d+|ext\d+_e\d+|s\d+_e\d+))\D*(?>_exec)(\[.*\])?[\s][-][\s]", ""]
  }

  # Change dashes (-) to (_)
  mutate {
    gsub => ["containerName", "-", "_"]
  }

  mutate {
    gsub => ["component", "-", "_"]
  }

  if [componentService]{
    mutate {
      gsub => ["componentService","-", "_"]
    }
  }

  # Remove containerLabels field (send from Dockbeat)
  mutate {
    remove_field => [ "containerLabels" ]
  }

  # if field message or messages exist, set stream_type = log
  if [messages] or [message]{
    mutate {
      add_field => {"stream_type" => "log"}
    }
  }

  # If is a beats trace or metrics from http
  if [beat] and (![stream_type] or ([stream_type] and [stream_type] != "log")) {
    if [stream] == "et_dockbeat"{
      # If container name is of type test_37 or sut37_ece_1 or eus-browser-87386960-13a1-4dec-bd70-e8ed4681dcd2_exec_37
      if ([containerName] =~ /(eus_browser_.*_exec_\d*|k8s_eus-browser-[^_]*(_|-)exec_\d*)|(\D*\d*_\D*_\d*)|(\D*_\d*)/) {
          mutate {
            add_field => {"stream_type" => "composed_metrics"}
          }
          if [componentService]{
            mutate {
              replace => {"component" => "%{component}_%{[componentService]}"}
            }
          }
      }
        #if is a beats trace from containers of other execution, not save it
      else{
        drop { }
      }
    }
    else{
      if [metricset]{
        # update type to format module_submodule (system_cpu)
        mutate {
          update => {"type" => "%{[metricset][module]}_%{[metricset][name]}"}
        }
        # Add tmp fields
        mutate {
          rename => {"%{[metricset][module]}" => "metricbeat_module"}
        }
        mutate {
          add_field => {"metricbeat_subtype" => "%{[metricset][name]}"}
        }
        # Change field module:{submodule: values} to module_submodule{values}
        mutate {
          rename => {"[metricbeat_module][%{[metricbeat_subtype]}]" => "%{[type]}"}
        }

        #Remove tmp fields
        mutate {
          remove_field => [ "metricbeat_module", "metricbeat_subtype" ]
        }

        if ![stream_type]{
          mutate {
            add_field => {"stream_type" => "composed_metrics"}
          }
        }
      }
    }
  }
  # If is a log trace
  else{
        # if beat, is ET filebeat trace
    if [beat] or [kubernetes] {
      mutate {
        replace => {"type" => "et_logs"}
      }
    }
    if ([type] == "et_logs"){
      mutate {
        remove_field => [ "stream" ]
      }
      mutate {
        add_field => {"stream" => "default_log"}
      }
      if [componentService]{
        mutate {
          replace => {"component" => "%{component}_%{[componentService]}"}
        }
      }
    }
  }



  if [host] and [host][name]{

      mutate {
        add_field => {"hostaux" => "%{[host][name]}"}
      }
      
      mutate {
        remove_field => [ "host" ]
      }

      mutate {
        rename => {"hostaux" => "host"}
      }
    }

  if [et_type] and [type] != "dynamic"{
	  mutate {
	    remove_field => [ "et_type" ]
	  }
  }
  
  if ![et_type]{
	  mutate {
	    add_field => {"et_type" => "%{[type]}"}
	  }
  }

  mutate {
    replace => {"type" => "_doc"}
  }

}


output {
  if [exec] {
    elasticsearch {
        hosts => "ELASTICHOST:9200"
        index => "%{[exec]}"
	document_type => "_doc"
    }
    rabbitmq {
        exchange => "amq.topic"
        exchange_type => "topic"
        key => "%{[component]}.%{[stream]}.%{[exec]}.%{[stream_type]}"
        user => "RABBITUSER"
        password => "RABBITPASS"
        host => "RABBITHOST"
        port => 5672
        vhost => "/elastest-etm"
    }

  }
}
