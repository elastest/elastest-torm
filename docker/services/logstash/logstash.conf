input {
  http {
    type => "testlogs"
    port => 5002
  }
  http {
    type => "dynamic"
    port => 5003
    codec => "json"
  }
  tcp {
    type => "testlogs"
    port => 5000
  }
  tcp {
    type => "sutlogs"
    port => 5001
  }
  beats {
    type => "beats"
    port => 5044
  }
  beats {
    port => 5037
    add_field => {
	"stream" => "et_dockbeat" 
    }
  }
}

filter{
  # If messages field exists, send an event for each array element
  if [messages] {
     split {
       field => "messages"
       add_field => { "message"=> "%{[messages]}" }
       remove_field => [ "messages" ]
     }
  }

  # Grok matches are separated to work correctly
  grok {
    patterns_dir => ["./grok-patterns"]
    match => { "message" => "%{JAVALOGLEVEL:level}" }
  }
  grok {
    patterns_dir => ["./grok-patterns"]
    match => { "message" => "%{CONTAINERNAME:containerName}" }
  }
  # match component, exec and componentService (if exist). Supports: test_37, sut37, sut37_ece_1, sut_37_ece
  grok{
    patterns_dir => ["./grok-patterns"]
    match => { "containerName" => "(?<component>(test|sut|dynamic))_?(?<exec>\d*)(_(?<componentService>[^_]*(?=_\d*)?))?"}
  }

  # Clean message
  mutate {
    gsub => ["message", "^[<]\d*[>].*(?>test_\d*|sut_\d*|dynamic_\d*)\D*(?>_exec)\[.*\][:][\s]", ""]
  }

  # Change dashes (-) to (_)
  mutate {
    gsub => ["containerName", "-", "_"]
  }

  mutate {
    gsub => ["component", "-", "_"]
  }

  if [componentService]{
	mutate {
		gsub => ["componentService","-", "_"]
	}
  }	

  # Remove containerLabels field (send from Dockbeat)
  mutate {
    remove_field => [ "containerLabels" ]
  }

  # if field message or messages exist, set stream_type = log
  if [messages] or [message]{
	mutate {
		add_field => {"stream_type" => "log"}
	}
  }
    
  # If is a beats trace
  if [beat] and (![stream_type] or ([stream_type] and [stream_type] != "log")) {
	if [stream] == "et_dockbeat"{
		# If container name is of type test_37 or sut37_ece_1
		if ([containerName] =~ /(\D*\d*_\D*_\d*)|(\D*_\d*)/) { 
		    mutate {
			add_field => {"stream_type" => "composed_metrics"}
		    }
	     	    if [componentService]{
			    mutate {
				replace => {"component" => "%{component}_%{[componentService]}"}
			    }
		    }
		}
		  #if is a beats trace from containers of other execution, not save it
		else{
			drop { }
		}	
	}
  }
  # If is a log trace
  else{
  	if ([type] == "testlogs") or ([type] == "sutlogs"){
	    mutate {
		add_field => {"stream" => "default_log"}
	    }
     	    if [componentService]{
		    mutate {
			replace => {"component" => "%{component}_%{[componentService]}"}
		    }
	    }
	}
  }
}


output {
	if [exec] {
		elasticsearch {
		    hosts => "ELASTICHOST:9200"
		    index => "%{[exec]}"
		}
		rabbitmq {
		    exchange => "amq.topic"
		    exchange_type => "topic"
		    key => "%{[component]}.%{[stream]}.%{[exec]}.%{[stream_type]}"
		    user => "RABBITUSER"
		    password => "RABBITPASS"
		    host => "RABBITHOST"
		    port => 5672
		    vhost => "/elastest-etm"
		}
		
	}
}
