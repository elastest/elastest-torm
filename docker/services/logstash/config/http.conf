input {
  http {
    type => "dynamic"
    port => 5003
    codec => "json"
  }
}

filter{
  # If messages field exists, send an event for each array element
  if [messages] {
     split {
       field => "messages"
       add_field => { "message"=> "%{[messages]}" }
       remove_field => [ "messages" ]
     }
  }

  # Grok matches are separated to work correctly
  grok {
    patterns_dir => ["./grok-patterns"]
    match => { "message" => "%{JAVALOGLEVEL:level}" }
  }
  grok {
    patterns_dir => ["./grok-patterns"]
    match => { "message" => "%{CONTAINERNAME:containerName}" }
  }
  # match component, exec and componentService (if exist). Supports: test_37, sut37, sut37_ece_1, sut_37_ece
  grok{
    patterns_dir => ["./grok-patterns"]
    match => { "containerName" => "(?<component>(test|sut|dynamic))_?(?<exec>\d*)(_(?<componentService>[^_]*(?=_\d*)?))?"}
  }

  # Clean message
  mutate {
    gsub => ["message", "^[<]\d*[>].*(?>test_\d*|sut_\d*|dynamic_\d*)\D*(?>_exec)\[.*\][:][\s]", ""]
  }

  # Change dashes (-) to (_)
  mutate {
    gsub => ["containerName", "-", "_"]
  }

  mutate {
    gsub => ["component", "-", "_"]
  }

  if [componentService]{
	mutate {
		gsub => ["componentService","-", "_"]
	}
  }	

  # Remove containerLabels field (send from Dockbeat)
  mutate {
    remove_field => [ "containerLabels" ]
  }

  # if field message or messages exist, set stream_type = log
  if [messages] or [message]{
	mutate {
		add_field => {"stream_type" => "log"}
	}
  }
}
