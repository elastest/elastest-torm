node {
    @Library('ciElastestConnect@fullyconfigurable') _
    elastest_lib.setVersion('dev')
    //initialization of the context for the library
    elastest_lib.setContext(this)
    elastest_lib.setMode('experimental-lite')
    if (env.WITH_SA == 'true') {
        elastest_lib.setOptionals('-sa='+env.SA)
    }
    def shared_elastest = false
    if (env.SHARED_ELASTEST != null && env.SHARED_ELASTEST == true) {
        shared_elastest = env.SHARED_ELASTEST 
    } else {
        elastest_lib.setShared(shared_elastest)
    }
    
    //elastest_lib.setTestLink(true)
    elastest_lib.setAuthenticatedElastest(true)
    //initialization of the runnable object to access elastest methods inside the pipeline
    def elastest= elastest_lib.getElastestMethods()
    def elastest_network = env.NETWORK

    //definition of nodes is managed by the library. Just declare the steps of your pipeline
    //inside the elastest_lib.pipeline({...})
    elastest_lib.pipeline({
        
        stage ('docker container')
            def mycontainer = elastest.ctx.docker.image('elastest/ci-docker-e2e:latest')
            mycontainer.pull()
            mycontainer.inside("-u root -v /var/run/docker.sock:/var/run/docker.sock:rw -v /dev/shm:/dev/shm")  {
                sh '/usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf &'
                def pluginPath = '/home/ubuntu/workspace/elastest-torm/e2e-tests/etm-jenkins-e2e-test/elastest-plugin/target/elastest.hpi'
                def pluginDirectory = 'elastest-plugin'
                def testRepositoryDirectory = 'elastest'

                try {
                    echo 'Clean exited containers'
                    sh 'docker ps -a -f name=elastest | grep Exited |  awk "{print $1}" | xargs docker rm -f'
                    sh 'docker ps -a -f name=test | grep Exited |  awk "{print $1}" | xargs docker rm -f'
                }catch (err) {
                    echo 'No containers in Exited state'
                }
            
                stage('build ElasTest plugin')
                    def pluginDirectoryExists = fileExists 'elastest-plugin'
                    if (pluginDirectoryExists) {
                        echo 'The elastset-plugin exists'
                    } else {
                        echo 'There is no elastset-plugin directory'
                        sh 'mkdir elastest-plugin'
                    }
                    dir(pluginDirectory) {
                        git 'https://github.com/elastest/elastest-jenkins.git'
                        echo 'Build ElasTest plugin'
                        sh 'pwd; ls -lrt; mvn clean package -B'
                    }
                
                stage ('prepare test')
                    def testDirectoryExists = fileExists 'elastest'
                    if (testDirectoryExists) {
                        echo 'The elastest directory exists'
                    } else {
                        echo 'There is no elastset directory'
                        sh 'mkdir elastest'
                    }
                    
                    dir(testRepositoryDirectory) {
                        echo 'Existing files before cloning the git repository'
                        git 'https://github.com/elastest/elastest-torm.git'
                    }
                
                    echo 'Prepare network'
                    elastest.connect2ElastestNetwork()
                    def elastestURL = elastest.getEtmUrl()
                    echo 'ElasTest URL: ' + elastestURL
                    
                    echo 'Prepare Jenkins'
                    def etCustmizedJenkinsImage = elastest.ctx.docker.image('elastest/etm-jenkins:latest')
                    echo 'Object for the Jenkins image declared'
                    try {
                        echo "Try to remove elastest_etm-jenkins_1 container if is started"
                        sh 'docker rm -f elastest_etm-jenkins_1'
                    } catch(e) {
                        echo "elastest_etm-jenkins_1 container not started"
                    }

                    def test_network =  shared_elastest ? "bridge" : elastest_network
                    echo 'Test network: ' + test_network
                    
                    etCustmizedJenkinsImage.withRun('--name elastest_etm-jenkins_1 -u 0  -v /var/run/docker.sock:/var/run/docker.sock --env JAVA_OPTS="-Djenkins.install.runSetupWizard=false" --network='+test_network) { c1 ->
                        stage ("E2E tests")
                                                            
                                echo "${c1.id}"                        
                                def ciUrl = "http://" + containerIp(c1.id, test_network) + ":8080"
                                echo "Jenkins URL: " + ciUrl                    
                                
                                try {
                                    echo "Run tests"
                                    sh "cd elastest/e2e-test; mvn -B clean test -Dtest=ElasTestPluginE2ETest -DePluginPath=" + pluginPath + " -DetEtmApi=" + elastest.getEtmUrl() + " -DeUser=" + elastest.getElasTestUser() + " -DePass=" + elastest.getElasTestPassword() + " -DciUrl=" + ciUrl + " -Dsel.jup.recording=true -Dsel.jup.screenshot.at.the.end.of.tests=true -Dsel.jup.screenshot.format=png -Dsel.jup.output.folder=surefire-reports -Dsel.jup.docker.network="+test_network
                                } catch(e) {                                    
                                    sh '''\
                                    docker ps --all
                                    docker ps --filter name=etm -q
                                    docker ps --filter name=etm -q | xargs -L 1 docker logs || true
                                    docker ps --filter name=etm -q | xargs -L 1 docker inspect || true                                    
                                    '''                            
                                } finally {                                    
                                    step([$class: 'JUnitResultArchiver', testDataPublishers: [[$class: 'AttachmentPublisher']], testResults: '**/target/surefire-reports/TEST-*.xml'])
                                }
                        }
            }

    })
}
  
  def containerIp(containerName, network) {
    echo "Inside containerIp function"
    containerIp = sh (
        script: "docker inspect --format=\"{{.NetworkSettings.Networks."+network+".IPAddress}}\" "+ containerName,
        returnStdout: true
    ).trim()
    
    echo containerName+" IP = " + containerIp;
    return containerIp;
}
