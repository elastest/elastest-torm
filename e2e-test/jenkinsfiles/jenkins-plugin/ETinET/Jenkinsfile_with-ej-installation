node(env.EXEC_NODE){
    try {
        elastest(tss: ['EUS'], surefireReportsPattern: '**/target/surefire-reports/TEST-*.xml', project: 'ETinET', sut: 8) {
            def elastest_url = ''
            def jenkins_url = ''
            def pluginPath = '/home/ubuntu/workspace/elastest-torm/e2e-tests/et_in_et/etm-plugin-with-installation-e2e-test-elastest/elastest-plugin/target/elastest.hpi'
            def pluginDirectory = 'elastest-plugin'
            def testRepositoryDirectory = 'elastest'
            
            stage ('docker container')
                def mycontainer = docker.image('elastest/ci-docker-e2e:latest')
                mycontainer.pull()
                mycontainer.inside("-u jenkins -v /var/run/docker.sock:/var/run/docker.sock:rw -v /dev/shm:/dev/shm")  {
                    sh '/usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf &'
                    sh 'env'
                    
                    stage('build ElasTest plugin')
                    def pluginDirectoryExists = fileExists 'elastest-plugin'
                    if (pluginDirectoryExists) {
                        echo 'The elastset-plugin exists'
                    } else {
                        echo 'There is no elastset-plugin directory'
                        sh 'mkdir elastest-plugin'
                    }
                    dir(pluginDirectory) {
                        git 'https://github.com/elastest/elastest-jenkins.git'
                        echo 'Build ElasTest plugin'
                        sh 'pwd; ls -lrt; mvn clean package -B'
                    }
                    
                    stage ('prepare test')
                        def testDirectoryExists = fileExists 'elastest'
                        if (testDirectoryExists) {
                            echo 'The elastest directory exists'
                        } else {
                            echo 'There is no elastset directory'
                            sh 'mkdir elastest'
                        }
                        
                        dir(testRepositoryDirectory) {
                            echo 'Existing files before cloning the git repository'
                            git 'https://github.com/elastest/elastest-torm.git'
                        }
                        //git 'https://github.com/elastest/elastest-torm.git'
                        elastest_url = 'http://nightly.elastest.io:37000'
                        jenkins_url =  env.ET_SUT_PROTOCOL + '://' + env.ET_SUT_HOST + ':' + env.ET_SUT_PORT
                    
                    stage ("Run tests")
                        try {                        
                            sh "cd elastest/e2e-test; mvn -Dtest=EJWhitInstallEtInEtTest -DetEtmApi=" + elastest_url + " -DeUser=${DEV_USER} -DePass=${DEV_PASS} -DciUrl=" + jenkins_url + " -DePluginPath=" + pluginPath + " -B test"
                        } catch(err) {
                            def errString = err.toString()
                            currentBuild.result = getJobStatus(errString)
                            throw err
                        } finally {
                            step([$class: 'JUnitResultArchiver', testDataPublishers: [[$class: 'AttachmentPublisher']], testResults: '**/target/surefire-reports/TEST-*.xml'])
                        }
                }
        }
    } catch (err) {
        if (currentBuild.result != "UNSTABLE") {
            def errString = err.toString()
            echo 'Error: ' + errString
            currentBuild.result = getJobStatus(errString)
        }
        echo 'Error!!! Send email to the people responsible for the builds.'
        emailext body: 'Please go to  ${BUILD_URL}  and verify the build',
        replyTo: '${BUILD_USER_EMAIL}', 
        subject: 'Job ${JOB_NAME} - ${BUILD_NUMBER} RESULT: ${BUILD_STATUS}', 
        to: '${MAIL_LIST}'

        throw err
    }
}

def getJobStatus(exceptionString) {
    def status = 'SUCCESS'
    if (exceptionString.contains('exit code 1')) {
        status = 'FAILURE'
    } else {
        status = 'ABORTED'
    }
    return status;
}