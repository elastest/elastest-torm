@Library('ciElastestConnect@fullyconfigurable') _
elastest_lib.setVersion('dev')
//initialization of the context for the library
elastest_lib.setContext(this)
elastest_lib.setMode('experimental-lite')
elastest_lib.setOptionals('-sa=172.17.0.1')
elastest_lib.setTestLink(true)
//initialization of the runnable object to access elastest methods inside the pipeline
def elastest= elastest_lib.getElastestMethods()

//definition of nodes is managed by the library. Just declare the steps of your pipeline
//inside the elastest_lib.pipeline({...})
elastest_lib.pipeline({
    
    try {

        stage ('docker container')
            def mycontainer = elastest.ctx.docker.image('elastest/ci-docker-e2e-compose:latest')
            mycontainer.pull()
            mycontainer.inside("-u jenkins -v /var/run/docker.sock:/var/run/docker.sock:rw -v /dev/shm:/dev/shm")  {
                sh '/usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf &'
                def testRepositoryDirectory = 'elastest'
                    
                stage ('prepare test')
                    def testDirectoryExists = fileExists 'elastest'
                    if (testDirectoryExists) {
                        echo 'The elastest directory exists'
                    } else {
                        echo 'There is no elastset directory'
                        sh 'mkdir elastest'
                    }
                    
                    dir(testRepositoryDirectory) {
                        echo 'Existing files before cloning the git repository'
                        git 'https://github.com/elastest/elastest-torm.git'
                    }
                
                    echo 'Prepare network'
                    elastest.connect2ElastestNetwork()
                    def elastestURL = elastest.getEtmUrl()
                    
                stage ("TestLink Fullteaching test")
                    try {
                        echo "Start Fullteaching"
                        sh "cd elastest/e2e-test; docker-compose -f src/test/resources/fullteaching.yml -p elastest up -d"
                        echo "Wait for fullteaching started"
                        sh "sleep 20"

                        def fullteachingIp = containerIp("elastest_full-teaching_1")
                        echo "Fullteaching IP: " + fullteachingIp  


                        echo "Run EtmTestLinkFullteachingE2eTest"
                        sh "cd elastest/e2e-test; mvn -B clean test -Dtest=EtmTestLinkFullteachingE2eTest -DfullteachingIp="+ fullteachingIp +" -DfullteachingPort=5000 -DetEtmApi=http://172.17.0.1:37000 -Dsel.jup.recording=true -Dsel.jup.screenshot.at.the.end.of.tests=true -Dsel.jup.screenshot.format=png -Dsel.jup.output.folder=surefire-reports -Dsel.jup.docker.network=elastest_elastest"
                    } catch(e) {
                        echo 'Err: ' + e.toString()
                        sh '''\
                        docker ps --all
                        docker ps --filter name=etm -q
                        docker ps --filter name=etm -q | xargs -L 1 docker logs || true
                        docker ps --filter name=etm -q | xargs -L 1 docker inspect || true
                        '''
                        throw e
                    } finally {
                        try{
                            sh "cd elastest/e2e-test; docker-compose -f src/test/resources/fullteaching.yml -p elastest down"
                        } catch(e) {
                            echo 'Error on stop Fullteaching docker compose: ' + e.toString()
                        }    
                        step([$class: 'JUnitResultArchiver', testDataPublishers: [[$class: 'AttachmentPublisher']], testResults: '**/target/surefire-reports/TEST-*.xml'])
                    }
            }
    } catch (err) {
        echo 'Error!!! Send email to the people responsible for the builds.'
        emailext body: "Please go to  ${BUILD_URL}  and verify the build",
        replyTo: '${BUILD_USER_EMAIL}', 
        subject: 'Job ${JOB_NAME} - ${BUILD_NUMBER} RESULT: ${BUILD_STATUS}', 
        to: '${MAIL_LIST}'
    }
})
  
  def containerIp(containerName) {
    echo "Inside containerIp function"
    containerIp = sh (
        script: "docker inspect --format=\"{{.NetworkSettings.Networks.elastest_elastest.IPAddress}}\" "+ containerName,
        returnStdout: true
    ).trim()
    
    echo containerName+" IP = " + containerIp;
    return containerIp;
}
