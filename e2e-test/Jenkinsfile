@Library('ciElastestConnect@fullyconfigurable') _
elastest_lib.setVersion('dev')
//initialization of the context for the library
elastest_lib.setContext(this)
elastest_lib.setMode('experimental-lite')
elastest_lib.setOptionals('-sa=172.17.0.1')
elastest_lib.setTestLink(true)
//initialization of the runnable object to access elastest methods inside the pipeline
def elastest= elastest_lib.getElastestMethods()

//definition of nodes is managed by the library. Just declare the steps of your pipeline
//inside the elastest_lib.pipeline({...})
elastest_lib.pipeline({
    
    stage ('docker container')
        def mycontainer = elastest.ctx.docker.image('elastest/ci-docker-e2e:latest')
        mycontainer.pull()
        mycontainer.inside("-u jenkins -v /var/run/docker.sock:/var/run/docker.sock:rw -v /dev/shm:/dev/shm")  {
            sh '/usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf &'
            def pluginPath = '/home/ubuntu/workspace/elastest-torm/etm-e2e-test/elastest-plugin/target/elastest.hpi'
            def pluginDirectory = 'elastest-plugin'
            def testRepositoryDirectory = 'elastest'
          
            stage('build ElasTest plugin')
            	def pluginDirectoryExists = fileExists 'elastest-plugin'
                if (pluginDirectoryExists) {
                    echo 'The elastset-plugin exists'
                } else {
                    echo 'There is no elastset-plugin directory'
                    sh 'mkdir elastest-plugin'
                }
            	dir(pluginDirectory) {
            	    git 'https://github.com/elastest/elastest-jenkins.git'
            	    echo 'Build ElasTest plugin'
            	    sh 'cd elastest-plugin; pwd; ls -lrt; mvn clean package -B'
            	}
            
            stage ('prepare test')
                def testDirectoryExists = fileExists 'elastest'
                if (pluginDirectoryExists) {
                    echo 'The elastest directory exists'
                } else {
                    echo 'There is no elastset directory'
                    sh 'mkdir elastest'
                }
                
                dir(testRepositoryDirectory) {
                	echo 'Existing files before cloning the git repository'
                    git 'https://github.com/elastest/elastest-torm.git'
                }
             
                echo 'Prepare network'
                elastest.connect2ElastestNetwork()
                def elastestURL = elastest.getEtmUrl()
                
                echo 'Prepare Jenkins'
                def etCustmizedJenkinsImage = elastest.ctx.docker.image('elastest/etm-jenkins:latest')
                echo 'Object for the Jenkins image declared'
            
                etCustmizedJenkinsImage.withRun('--name elastest_etm-jenkins_1 -u 0 --env JAVA_OPTS="-Djenkins.install.runSetupWizard=false" --network="elastest_elastest"') { c1 ->
                    stage ("E2E tests")
                    	
                    	    echo "Jenkins Url: " + jenkinsUrl
                    		echo "${c1.id}"                        
                            def ciUrl = "http://" + containerIp(c1.id) + ":8080"
                            echo "Jenkins URL: " + ciUrl                    
                            
        	                try {
        	                    echo "Run tests"
        	                    sh "cd elastest/e2e-test; mvn -B clean test -DePluginPath=" + pluginPath + " -DetEtmApi=http://172.17.0.1:37000 -DciUrl=" + ciUrl + " -Dsel.jup.recording=true -Dsel.jup.screenshot.at.the.end.of.tests=true -Dsel.jup.screenshot.format=png -Dsel.jup.output.folder=surefire-reports -Dsel.jup.docker.network=elastest_elastest"
        	                } catch(e) {
        	                    sh '''\
        	                       docker ps --all
        	                       docker ps --filter name=etm -q
        	                       docker ps --filter name=etm -q | xargs -L 1 docker logs || true
        	                       docker ps --filter name=etm -q | xargs -L 1 docker inspect || true
        	                    '''
        	                } finally {
        	                    step([$class: 'JUnitResultArchiver', testDataPublishers: [[$class: 'AttachmentPublisher']], testResults: '**/target/surefire-reports/TEST-*.xml'])
        	                }
    	            }
        }
  })
  
  def containerIp(containerName) {
    echo "Inside containerIp function"
    containerIp = sh (
        script: "docker inspect --format=\"{{.NetworkSettings.Networks.elastest_elastest.IPAddress}}\" "+ containerName,
        returnStdout: true
    ).trim()
    
    echo containerName+" IP = " + containerIp;
    return containerIp;
}